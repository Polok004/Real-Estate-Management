import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.data.general.DefaultPieDataset;

import javax.swing.*;
import java.awt.*;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import org.jfree.data.UnknownKeyException;
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
       
/**
 *
 * @author shoumikbarmanpolok
 */
public class PIECHART extends javax.swing.JFrame {

    
     P_TYPE type=new P_TYPE();
        HashMap<Integer,String> map=type.getTypesMap1();
        
        public PIECHART() {
        initComponents();
        generatePieChart();
       jPanel1.setBackground(Color.black);
        jPanel1.repaint();
        jPanel1.setOpaque(true);
        this.setVisible(true);



    }

    private void generatePieChart() {
        try {
            P_SALES sales = new P_SALES();
            DefaultPieDataset dataset = createDataset();

            JFreeChart chart = ChartFactory.createPieChart(
                    "Property Type Sales Distribution", // chart title
                    dataset,  true, // include legend
                    true,
                    false
            );

            ChartPanel chartPanel = new ChartPanel(chart);
            chartPanel.setPreferredSize(new Dimension(600, 500));

            jPanel1.setLayout(new BorderLayout());
            jPanel1.add(chartPanel, BorderLayout.CENTER);
            jPanel1.setBackground(Color.black);

            
            this.pack(); // Adjusts the frame size based on its contents
            this.setLocationRelativeTo(null); // Centers the frame on the screen
            this.setVisible(true);

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error generating pie chart: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    






 private DefaultPieDataset createDataset() throws SQLException {
    DefaultPieDataset dataset = new DefaultPieDataset();
    P_SALES sales = new P_SALES();
    ArrayList<P_SALES> salesList = sales.clientList();

    for (P_SALES sale : salesList) {
        int propertyId = sale.getPropertyId();
        String propertyType = sales.getPropertyTypeById(propertyId);

        if (propertyType != null) {
            // Trim property type and check for leading/trailing whitespaces
            propertyType = propertyType.trim();
          //  System.out.println("Property Type: " + propertyType + ", Property ID: " + propertyId);

            // Debug: Print existing keys in the dataset
          //  System.out.println("Existing keys in dataset: " + dataset.getKeys());

            // Check if the key already exists in the dataset
            boolean keyExists = false;
            for (Object key : dataset.getKeys()) {
                if (propertyType.equals(key)) {
                    keyExists = true;
                    break;
                }
            }

            if (!keyExists) {
              //  System.out.println("Adding key to dataset: " + propertyType);
                dataset.setValue(propertyType, 1.0); // Use Double values
            } else {
                // Update the existing value
                double oldValue = (double) dataset.getValue(propertyType);
                dataset.setValue(propertyType, oldValue + 1);
            }
        }
    }

    return dataset;
}

    
    









    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(247, 247, 247)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(206, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(207, 207, 207)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(148, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PIECHART.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PIECHART.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PIECHART.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PIECHART.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PIECHART().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

}
